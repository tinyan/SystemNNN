CGameクラス
CGameCallBackクラスを継承してください。

そのなかで
使用するシステムクラスの作成
独自クラスの作成
を、行います

GameLib\commonGeneral.h	を参考に
CCommonGeneralを継承してクラスを作成します。

モード番号は、50〜99を使用してください。
0〜49はシステムで使用されています

必須継承メソッド
int Init(void);	//戻り値は-1を返してください
モードが切り替えられた時に呼ばれます

int Calcu(void);
フレームごとに呼ばれます。

-1以外の値(次に切り替えたいモード番号)を返すと、即座にモードが切り替わります

return ReturnFadeOut(モード番号);	という返し方をすると、設定ファイルに指示があれば、
フェードアウト(フェードアウト終了後にモードがきりかわります)
次のフェードインの準備を行います

int Print(void);	//戻り値は-1を返してください
スクリーンバッファに必要な画像を書き込みます

BOOL CAreaControl::CheckAllPrintMode(void);
の値をみて、全画面書きなおすべきかどうかを判断してください。
これがTRUEの時は、全画面を書きなおす必要があります

FALSEのときは、そのクラスで必要な部分だけを書きなおし
void CAreaControl::AddArea(int x, int y, int sizeX, int sizeY);
をつかって、変更部分を指示してください

------------------------------------------------------------------------------------------------------------------
lib\
CPictureオブジェクト

DWQフォーマットの画像データの読み込み、バッファーへの書き込みを行います。

CAreaControlクラス
画像の修正部分をコントロールします。
------------------------------------------------------------------------------------------------------------------
CCommonSystemFileのstatic Methodについて



static void SetMaxScriptNumber(int n = 64);
static void SetMaxCGCharaNumber(int n = 20);

システムファイルのサイズが固定のため
スクリプトの個数の最大値を減らすことで
スクリプトあたりのフィルム数、メッセージ個数の最大値を増やすことができます

CGキャラの人数を減らすことで
CGキャラ一人あたりのCG枚数を増やすことができます


script	設定値
spt		内部的に確保されるスクリプト数
film	1スクリプトあたりの使えるフィルムの最大個数
mes		1スクリプトあたりの使えるメッセージの最大数

	//script	:spt	film	mes
	//2:		:2		65536	65536*2
	//3〜4		:4		32768	65536
	//5〜8		:8		16384	32768
	//9〜16		:16		8192	16384
	//17〜32	: 32	4096	8192
	//33〜64	: 64	2048	4096
	//65〜128	: 128	1024	2048
	//129〜256	: 256	512		1024


player	設定値
pl		内部的に確保されるプレイヤー数
cg		1プレイヤーあたりの最大CG個数


	//player	:pl		cg
	//1			:1		2048cg
	//2			:2		1024cg
	//3〜5		:5		512cg
	//6〜10		:10		256cg
	//11〜20	:20		128cg
	//21〜40	:40		64cg
	//41〜80	:80		32cg
	//81〜160	:160	16cg
	//161〜255	:320	8cg

----------------------------------------------------------------------------------------------
各種システムCPictureオブジェクトを
バッファーとして使用する場合の注意





CGameCallBack::m_overrapPic1;
CGameCallBack::m_overrapPic2;

サイズは画面サイズ固定です。変更しないでください(画面とサイズの違う絵を読み込むのも不可)
モード切り替え時のフェードインフェードアウトに流用していますので
Init()では使用できません



---------------------------------------------------------------------------------------------------
CSuuji::CSuuji(CPicture* lpPic, int sizeX, int sizeY, int keta, int nextX, BOOL upZeroFlag, BOOL transFlag, BOOL leftFlag)


lpPic 数字フォントグラフィック 0 1 2 3 4 5 6 7 8 9 : / %
色違いを用意するときは、縦に色ごとのデータをおく


sizeX,sizeY	数字フォントの大きさ
keta	表示数字のデフォルトの桁数
nextX	次の数字表示位置までのdot数	(default = sizeX)
upZeroFlag	右詰めの時、上位の不要な0を表示するかどうか (default = FALSE [表示しない])
transFlag	ぬきのありなし (default = TRUE [あり])
leftFlag	左詰め表示フラグ (default = FALSE) [右詰め])



void Print(int printX, int printY, int dat,int keta = -1,int col = 0);
数値を表示する

void Put(int printX, int printY, int ch,int col = 0);
[:][/][%]記号など数字フォントキャラを表示するための1文字表示ルーチン






-----------------
CCommonWaveクラス
LoadPackWave()でかためたやつからよみこみます










標準推奨退避レイヤー(全部で32個)
数字が小さいものほど上にくる

0-15システム予約

0:マウス
2:メッセージカーソル
4:シーン、オプションボタン
6:		共通戻るボタン
8-9:	共通上下カーソル




16-31ユーザー用



