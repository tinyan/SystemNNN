
CGame
ゲームごとに独自に作成する必要のあるクラス
CGameCallBackを継承する

-------------------------------------------------------------------------------------------------------------------
GameCallBack


-------------------------------------------------------------------------------------------------------------------
CFileControl
CLoad,CSaveで使用される
ファイル一覧を表示し選択する。CLoadで使われる場合には、データのないところは選択できない。
必要な数のCDataFileオブジェクトを作成する。
-------------------------------------------------------------------------------------------------------------------
CDataFile
Saveデータの表示、読み込みを行う。
-------------------------------------------------------------------------------------------------------------------
CMessageWindow
メッセージウィンドウの読み込み、表示を行う。
-------------------------------------------------------------------------------------------------------------------
CGameMouse
マウスグラフィックの読み込み、表示を行う。
-------------------------------------------------------------------------------------------------------------------
CMessageCursor
メッセージカーソルの読み込み、表示を行う。通常時用とオートモート用の２種類を読み込む。
アニメ可能。
-------------------------------------------------------------------------------------------------------------------
CSceneOptionButton
オプションボタン、シーン鑑賞モード時用ボタンの読み込み、表示、マウスがのったどうかの判断を行う
-------------------------------------------------------------------------------------------------------------------
CCommonSystemFile

main.cppで作成し、CGame (CGameCallBack)クラス作成時にに渡す
作成前に必要に応じて以下のstatic Methodを実行させておく

static void SetMaxScriptNumber(int n = 64);
ゲームで使用するスクリプトの数を指定する
ワークサイズは一定のため、スクリプトの数によって、1スクリプトあたりのフィルムフラグ、メッセージフラグの最大数が変化する

//n			:(spt)	film	mes
//2:		:2		65536	131072
//3〜4		:4		32768	65536
//5〜8		:8		16384	32768
//9〜16		:16		8192	16384
//17〜32	: 32	4096	8192
//33〜64	: 64	2048	4096	//default
//65〜128	: 128	1024	2048
//129〜256	: 256	512		1024


static void SetMaxCGCharaNumber(int n = 20);
ゲームで使用するCG鑑賞用のキャラの数を指定する
ワークサイズは一定のため、キャラの数によって1キャラあたりのCGフラグの最大数が変化する

//n			:(pl)	cg
//1			:1		2048
//2			:2		1024
//3〜5		:5		512
//6〜10		:10		256
//11〜20	:20		128			//default
//21〜40	:40		64
//41〜80	:80		32
//81〜160	:160	16
//161〜255	:320	8





static void SetDefaultSei(LPSTR sei);
static void SetDefaultMei(LPSTR mei);
//systemfileが存在しないときに作成されるsystemfileのゲーム内デフォルト姓名を指定する
//default = sei:沖津 mei:尊 それぞれ8byte(全角4文字)までが望ましい(指定は15byteまで可能)

-------------------------------------------------------------------------------------------------------------------
NOTHING_MODE = 1

ヘッダー:commonNothing.h
クラス CCommonNothing

動作
起動直後に最初によばれるモード
1フレームだけ画面をぬりつぶし、LOGOモードに移行する

参照:init\nothing.xtx
-------------------------------------------------------------------------------------------------------------------
LOGO_MODE = 2

ヘッダー:commonLogo.h
クラス CCommonLogo

動作
1つ又は複数のロゴ画面をフェードイン、フェードアウト付きで表示する(DWQファイル)
画像サイズは、画面サイズと同じでなければならない
マウスクリックによりロゴごとにスキップされる
動作終了後は TITLE_MODE に移行する

参照:init\logo.xtx



-------------------------------------------------------------------------------------------------------------------
OPENING_MODE = 3	削除
-------------------------------------------------------------------------------------------------------------------
TITLE_MODE = 4

ヘッダー:commonTitle.h
クラス:CCommonTitle

動作
	基本モード
背景に基本ボタン5つを重ねて表示し処理する
[最初から]
[続きから]	体験版、デモ版は選択不可
[環境設定]
[おまけ]
[終了]

	拡張モード
システム変数をチェックして
追加ボタンを含めて表示し処理する(未実装)

ボタンの上にカーソルがのって一定時間で音声を出す機能(未実装)

参照:init\title.txt
omakeFlag (0:おまけなし 1:おまけあり)(Default = 1)
mustLoadFlag (0:[続きから]標準動作(体験版等では灰色になる) 1:体験版でも[続きから]あり)
-------------------------------------------------------------------------------------------------------------------
LOAD_MODE = 6

ヘッダー:commonLoad.h
クラス CCommonLoad

参照:init\load.xtx

動作
セーブファイル一覧を表示し、選択させる

クリックした場合、データを読み込む
拡張データがある場合には
CGameCallBack::SetExtDataByLoad(LPVOID ptr,int n);を必要な回数呼び出す

最後に
CGameCakkBack::InitLoadGame();	を呼び出し、セーブデータのモードに以降するので
つぎのモードは指定せず、-1をかえすこと
-------------------------------------------------------------------------------------------------------------------
SAVE_MODE = 7
ヘッダー:commonSave.h
クラス CCommonSave

参照:init\save.xtx

セーブファイル一覧を表示し、選択させる
クリックした場合、保存する
すでにデータが存在する場合、上書き確認のダイアログをだし、選択させる
-------------------------------------------------------------------------------------------------------------------
LISTENBGM_MODE = 8

ヘッダー:commonListenBgm.h
クラス CCommonListenBGM

動作 BGMを選択し、試聴できる。ボリュームの一時的な設定が行える

特殊参照:nnndir\\bgmtime.txt
BGMの長さを分、秒の順に指定

参照:init\listenBGM.xtx
-------------------------------------------------------------------------------------------------------------------
SELECTMESSAGE_MODE = 9

ヘッダー:commonSelectMessage.h
クラス:CCommonSelectMessage

動作	スクリプトで指定された選択肢を表示し、
えらばれた選択肢に対応したスクリプトの動作に続く

決定時必須動作:
m_game->SearchCase(m_nowSelect);		m_nowSelect : 1〜n
m_game->SetYoyaku();
return -1;

-------------------------------------------------------------------------------------------------------------------
PRINTMESSAGE_MODE = 10

ヘッダー:commonPrintMessage.h
クラス:CCommonPrintMessage

動作	メッセージ表示および、draw処理を行う
-------------------------------------------------------------------------------------------------------------------
11 削除
-------------------------------------------------------------------------------------------------------------------
CONFIG_MODE = 12

ヘッダー:commonConfig.h
クラス CCommonConfig

参照:init\config.xtx

各種ゲーム設定を行う
-------------------------------------------------------------------------------------------------------------------
SYSTEMMENU_MODE = 13

ヘッダー:commonSystemMenu.h
クラス CCommonSystemMenu

参照:init\systemmenu.xtx

システムメニューを表示し、選択された動作を行う
-------------------------------------------------------------------------------------------------------------------
PRINTOVERRAP_MODE = 14

ヘッダー:commonOverrap.h
クラス CCommonOverrap

動作
オーバーラップ表示処理をおこなう

参照:init\overrap.xtx

-------------------------------------------------------------------------------------------------------------------

OMAKE_MODE = 15


ヘッダー:commonOmake.h
クラス:CCommonOmake

動作
	基本モード
背景に基本ボタン4つを重ねて表示し処理する
[CG鑑賞]
[シーン鑑賞]
[音楽鑑賞]
[戻る]

	拡張モード
システム変数をチェックして
追加ボタンを含めて表示し処理する(未実装)


ボタンの上にカーソルがのって一定時間で音声を出す機能

参照:init\omake.txt
-------------------------------------------------------------------------------------------------------------------
SELECTCGCHARA_MODE = 16

ヘッダー:commonSelectCGChara.h
クラス:CommonSelectCGChara

動作
CG鑑賞画面のキャラクターを選択して
CGameCallBack::SetCGCharaNumber(int charaNumber);で指定し
SELECTCG_MODEに移行する

キャンセルでOMAKE_MODEにもどる

//cgNumber (default = プログラム側からもらう)
-------------------------------------------------------------------------------------------------------------------
SELECTCG_MODE = 17

ヘッダー:commonSelectCG.h
クラス:CommonSelectCG

参照:init\selectCG.xtx

動作
CGを選択する
選択後	PRINTCG_MODEに移行する
-------------------------------------------------------------------------------------------------------------------
SELECTSCENE_MODE = 18

ヘッダー:commonSelectScene.h
クラス:CommonSelectScene

参照:init\selectScene.xtx


nnndir\sceneVoice.txt	に表記された情報つきでシーン一覧を表示し、
対応するフィルムを表示する


シーンを選択した場合:
m_game->SetSceneNumber(scene);	//scene:0〜
if (m_game->StartSceneMode()) return -1;	//	シーン表示モードであることをCGameCallBackに伝える
return ReturnFadeOut(-1);

キャンセルした場合
return ReturnFadeOut(m_backMode);

-------------------------------------------------------------------------------------------------------------------
19 なし
-------------------------------------------------------------------------------------------------------------------
SELECTSCENECHARA_MODE = 20

ヘッダー:commonSelectSceneChara.h
クラス:CommonSelectSceneChara

参照:init\selectSceneChara.xtx

動作
シーン鑑賞の人物番号を指定する

選択時
m_game->SetSceneCharaNumber(m_selectedNumber);
m_game->SetSceneNumber(0);
m_game->SetCommonBackMode(SELECTSCENE_MODE,SELECTSCENECHARA_MODE);
return ReturnFadeOut(SELECTSCENE_MODE);

キャンセル時
return ReturnFadeOut(OMAKE_MODE);

-------------------------------------------------------------------------------------------------------------------
CDERROR_MODE = 21

ヘッダー:commonCDError.h
クラス CCDError

参照:init\cderror.xtx

動作
CDの再生ができないことを表示し
CDの再生を行わないか、再試行をえらばせる

-------------------------------------------------------------------------------------------------------------------
SELECTPLACE_MODE = 22

ヘッダー:commonSelectPlace.h
クラス CCommonSelectPlace

参照:init\selectPlace.xtx

動作:
場所を選ばせる
キャンセルは存在しない(必要なときは、キャンセルの場所ボタンを追加し、スクリプトで対処する)
-------------------------------------------------------------------------------------------------------------------
PRINTCG_MODE = 23

ヘッダー:commonPrintCG.h
クラス CCommonPrintCG

参照:init\printCG.xtx

動作
CG表示。自動スクロール処理。

右クリックでもどる
-------------------------------------------------------------------------------------------------------------------
24-28 なし
-------------------------------------------------------------------------------------------------------------------
NAMEINPUT_MODE = 29
//削除予定
ヘッダー:commonNameInput.h
クラス CCommonNameInput

-------------------------------------------------------------------------------------------------------------------
PRINTCALENDAR_MODE = 30

保留中

-------------------------------------------------------------------------------------------------------------------
MINIGAME_MODE = 40
略


//memo
メニューなどのボタンは
通常、のせた、決定用、選択不可用の順

決定時は 0,2きりかえ 1,2きりかえ 2のみのパターンから動作を選ぶ









----------------------------------------------------------------------------------------------------------------------
追加実行モード(クラス)

現在実行中のモード(クラス)ごとに(親クラスと呼ぶ)
追加実行モード(クラス)が32個まで設定できる(おまけクラスと呼ぶ)
ただし、一つの親クラスに、同一のおまけクラスの複数登録は不可

CGameCallBackに以下を追加

void AllClearOmake(void);
	//全てのおまけクラスの登録を削除（ゲーム起動時に１かい呼び出されている）

void ClearOmake(parentModeNumber);
	//parentModeNumber に属するおまけクラスを全て登録削除

BOOL AddOmakeClass(parentModeNumber,omakeModeNumber,int mode=0xf,int place=-1);
	//parentModeNumberで指定される親クラスに、omakeModeNumberで指定されるおまけクラスを追加または挿入
	//place指定無し(-1)だと追加、指定ありだとplaceの位置に挿入。
	//modeで追加されるおまけクラスの初期モードを指定
	//すでに登録されているものを登録しようとした場合や、最大数登録されている場合には登録せずにFALSEを返す

BOOL DeleteOmakeClass(parentModeNumber,omakeModeNumber);
	//parentModeNumberで指定される親クラスに属する、omakeModeNumberで指定されるおまけクラスを削除する
	//おまけクラスが存在しない場合はFALSEをかえす



int GetOmakeMode(parentModeNumber,omakeModenumber,type);
	//parentModeNumberで指定される親クラスに属するomakeModeNumbeで指定されるおまけクラスの動作モードを取得する
	//typeで取得したいモードの種類を指定する typeについては後述
	//戻り値は type:0-7の場合には 0 か 1
	//type == -1の場合には 0-255
	//おまけクラスが存在しない場合には-1をかえす

//	type 0:Init呼ぶ 1:Calcu呼ぶ 2:Print呼ぶ 3:EndMode呼ぶ 4:(未使用) 5:CalcuMust特殊時にも呼ぶ 6:PrintMust特殊時にも呼ぶ 7:(未使用)
//	type -1:all
//	typeによる戻り値、設定値は	type == 0〜7	: 0-1
//								type == -1		: 0-255


void SetOmakeMode(parentModeNumber,mode,omakeModenumber=-1,type=-1);
	//parentModeNumberで指定される親クラスに属するomakeModeNumbeで指定されるおまけクラスの動作モードを設定する
	//omakeModeNumber == -1の場合にはparentModeNumberで指定される親クラスが所持するすべてのおまけクラスに対し設定を行う



実体
int [modeNumber TITLE_MODEなど][32 フラグ];	3200*sizeof(int) = 12800 bytes
modeNumber == 0 なし
フラグ bit0:Init bit1:Calcu bit2:Print bit3:modeend		1で実行される
bit5 システム特殊効果中も計算する
bit6 システム特殊効果中も表示する

システム特殊効果中とは、モード切り替えの際のフェードイン等の効果がかかっているタイミング
このタイミング中は通常のcalcu printは呼ばれないので追加クラスもデフォルトは呼ばない設定になっている

セーブファイルにも自動で保存する予定（現在保存されません）




追加実行クラスの呼ばれるタイミング

CGame::MainLoop
{
	CHoheHoge1::Calcu();

		この間にモーダル移行タイミング有り(実際は CHogehoge1::Calau() の内部)
		モーダル移行時は以下は実行されない

	COmake1::Calcu();
	COmake2::Calcu();


	CHogeHoge1::Print();
	COmake1::Print();
	COmake2::Print();


	Flip();

	if (モード変更あった場合	CHogeHoge2,COmake2,COmake3が次から有効な場合)
	{
		CHogehoge1::EndMode();
		COmake1::EndMode();

		CHogeHoge2::Init();
		COmake3::Init();
		...
	}
}


モーダル移行した場合
新規親クラスのInitがよばれ
おまけクラスは通常のモード変更があったものとして
EndMode()
Init()
等が呼び出されます


--------------------------------------------------------------------------------------------------------------------
マルチスレッド対応して
新スレでモーダルてきな使い方が可能になるようにする

ただし同時に動作しているスレッドは1つのみ
	の予定でしたが、メインスレッドをとめるとウィンドウメッセージそのものが発生しなくなるので
	メインスレッド（主にウィンドウメッセージ監視）、ゲームスレッドの２つが動作するようになりました
	メインスレッドではウィンドウメッセージのうちCGameCallBackで処理するものを
	ゲームスレッドにPostしています
	モーダル移行および戻るときなどに、タイミングによってはメッセージ等をおとすことがあるようです
		(PostThreadMessageでなげたタイミングでモーダルからもどられると、スレッドがなくなり(停止させても同様)なげたメッセージは中に浮いてしまう)
		このあたりはもうすこし処理の方法を考える必要があるみたいです

	案1	直接CGameCallBack::GameProcをよぶ(WM_PAINTのみなげるべきか)
		問題点:排他処理がないための問題点が考えられる。
		特に問題になっているマウスを放したメッセージについては、
		メインループの中で物理的にチェックを行い処理する

	案2 CriticalSectionなどで排他処理をおこなう
		問題点:マウスメッセージ等、頻繁にくるメッセージを処理するのでパフォーマンスが極端におちるのではないか

		
(現在、案1で実装しています)



virtual BOOL StartModalThread(int modeNumber, int printMode = 0,int stackSize = 0);
	//modeNumberで指定されるクラスにモーダルでモード変更する
	//printModeで現在実行中のクラスのPrintを呼ぶかどうかを指定する
	//0:よばない
	//1:よぶ	上位(親)クラスのPrintも(存在してかつ呼び出す設定になっていれば)呼び出す
	//2:よぶが、更に上位(親)クラスのPrint()は呼び出さない

	//モーダル移行は、親クラスの中断なので、親クラスのEndMode()はよびだされませんが
	//おまけクラスについては、通常のモード変更と同様の処理が行われます

virtual BOOL EndModalThread(void);
	//現在のモーダルクラスを終了し親クラスのよびだされた個所から実行を再開する

	//モーダル終了は、親クラスの再開なので、親クラスのInit()はよびだされませんが
	//おまけクラスについては、通常のモード変更と同様の処理が行われます



//
// モーダル状態でロードセーブは行えません
// 


現在のばーじょんでは、ｘボタンの処理がはいっていないのと、スレッド終了をまっていないので
メモリおよびリソースリークが発生します



----------------------------------------------------------------------------------------------------------------------
マルチスレッド対応に伴い
WinMainで呼ぶMainControlクラスの開始部分が2種類になりました

BOOL CMainControl::MultiThreadGame(CGameCallBack* lpGame);
マルチスレッドライブラリ使用のモーダルクラス対応ルーチン

BOOL CMainControl::Game(CGameCallBack* lpGame);
従来のシングルスレッドライブラリ使用




























